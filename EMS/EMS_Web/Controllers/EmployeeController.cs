using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EmployeeLib;
using EmployeeLib.Abstractions;
using EMS_Web.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace EMS_Web.Controllers
{
    
    public class EmployeeController : Controller
    {
        private readonly IRepositoryEmployee<Employee> _repository;
        public EmployeeController(IRepositoryEmployee<Employee> repository)
        {
            _repository = repository;
        }
        /*
         IActionResult
            ActionResult
                ContentResult -> Content()
                JsonResult->Json()
                ViewResult-> View()
                FileResult->File()
                RedirectToActionResult-> RedirectToAction()
             */
        // GET: Employee
        [Route("")]// this is default route
        [Route("Employee")]// this is route with only Employee
        [Route("Employee/Index")]
        public ActionResult Index()
        {
            var employees=_repository.GetEmployees();
            List<EmployeeDepartmentViewModel> evm = new List<EmployeeDepartmentViewModel>();
            foreach (var item in employees)
            {
                EmployeeDepartmentViewModel emp = new EmployeeDepartmentViewModel();
                emp.Id = item.Id;
                emp.Name=$"{item.Fname} {item.Mname} {item.Lname}";
                emp.Age = item.Age??1;
                emp.DepartmentName = item.department.Name;
                evm.Add(emp);
            }
            return View(evm);
            //return Json(new { 
            //Id=1,
            //Fname="Pushpinder",
            //Lname="Kaur"
            //});
        }

        // GET: Employee/Details/5
        public ActionResult Details([FromRoute]int id=1)
        {
            var employee = _repository.GetEmployeeById(id);
                EmployeeViewModel evm = new EmployeeViewModel() { 
                Fname=employee.Fname,
                Lname=employee.Lname,
                Mname=employee.Mname,
                Age=employee.Age??1,
                Salary=employee.Salary??1,
                Ssn=employee.Ssn,
                StartDate=employee.Startdate,
                Department=employee.department.Name
            };

            return View(evm);
        }

        // GET: Employee/Create
        public ActionResult Create()
        {
            return View();
        }

        // POST: Employee/Create
        [HttpPost]
        [ValidateAntiForgeryToken] // this will validate the token generated by the form in server
        // to receive form value we have ModelBinder as a utitlity which will check where from these values are coming
        // Model
        // RouteValues
        // FormCollection
        // QueryString
        // File
        public ActionResult Create([Bind("Fname,Lname,Age,Ssn")]EmployeeViewModel employee, IFormCollection form)
        {
            try
            {
                if (ModelState.IsValid)
                {
                    // TODO: Add insert logic here
                    EmployeeLib.Employee emp = new Employee()
                    {
                        Fname = employee.Fname,
                        Age = employee.Age,
                        Deptid = 1,
                        Lname = employee.Lname,
                        Mname = employee.Mname,
                        Salary = employee.Salary,
                        Ssn = employee.Ssn,
                        Startdate = employee.StartDate
                    };

                    _repository.AddEmployee(emp);

                    return RedirectToAction(nameof(Index));
                }
                else
                    return View();
            }
            catch
            {
                return View();
            }
        }

        // GET: Employee/Edit/5
        public ActionResult Edit(int id)
        {
            return View();
        }

        // POST: Employee/Edit/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(int id, IFormCollection collection)
        {
            try
            {
                // TODO: Add update logic here

                return RedirectToAction(nameof(Index));
            }
            catch
            {
                return View();
            }
        }

        // GET: Employee/Delete/5
        public ActionResult Delete(int id)
        {
            return View();
        }

        // POST: Employee/Delete/5
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(int id, IFormCollection collection)
        {
            try
            {
                // TODO: Add delete logic here

                return RedirectToAction(nameof(Index));
            }
            catch
            {
                return View();
            }
        }
    }
}